// Generated by CoffeeScript 1.10.0
(function() {
  window.MoviesView = Backbone.View.extend({
    template: _.template('<button type="button" class="btn btn-primary btn-lg all"><h2>Movies</h2></button> <div class="btn-group" role="group" aria-label="button group"><a href="" class="btn btn-default disabled" role="button">Sort:</a><button type="button" class="btn btn-default sort-title">Title</button><button type="button" class="btn btn-default sort-inventory">Inventory</button><button type="button" class="btn btn-default sort-release-date">Release Date</button></div><div><input type="text" class="form-control" placeholder="Search for..."></div>'),
    events: {
      'click button.all': 'fetchAll',
      'click button.sort-title': 'sortTitle',
      'click button.sort-inventory': 'sortInventory',
      'click button.sort-release-date': 'sortReleaseDate'
    },
    initialize: function() {
      return this.sortType;
    },
    render: function() {
      this.$el.html(this.template);
      return this.addAll();
    },
    fetchAll: function() {
      this.collection.fetch({
        success: _.bind(function(collection, response, options) {
          return this.render();
        }, this),
        error: _.bind(function(collection, response, options) {
          console.log("ERROR: COLLECITON", collection);
          console.log("ERROR: RESPONSE", response);
          return console.log("ERROR: OPTIONS", options);
        }, this)
      });
      return this.fullCollection = this.collection;
    },
    sortTitle: function() {
      return this.sortAttr("title");
    },
    sortInventory: function() {
      return this.sortAttr("release_date");
    },
    sortAttr: function(attr) {
      var orderedCollection, reverseCollection;
      if (this.sortType === attr) {
        reverseCollection = this.collection.toJSON();
        reverseCollection.reverse();
        this.collection.reset(reverseCollection);
      } else {
        orderedCollection = this.collection.sortBy(attr);
        this.collection.reset(orderedCollection);
        this.sortType = attr;
      }
      return this.render();
    },
    addAll: function() {
      return this.collection.forEach(this.addOne, this);
    },
    addOne: function(movie) {
      var movieView;
      movieView = new MovieView({
        model: movie
      });
      movieView.render();
      return this.$el.append(movieView.el);
    }
  });

}).call(this);
